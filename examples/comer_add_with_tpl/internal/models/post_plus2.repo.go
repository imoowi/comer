// generated by "comer add-with-tpl"
// © 2024 IMOOWI. All Rights Reserved.
//
//	@Author	yuanjun<imoowi@qq.com>
package models

import (
	"errors"

	"// generated by "comer add-with-tpl"
// © 2024 IMOOWI. All Rights Reserved.
//
//	@Author	yuanjun<imoowi@qq.com>/internal/global"
	"github.com/imoowi/examples/comer_add_with_tpl/internal/util/response"
	"github.com/imoowi/examples/comer_add_with_tpl/pkg/frame"
	"github.com/imoowi/examples/comer_add_with_tpl/pkg/mysql"

	"github.com/spf13/cast"
)

type PostPlus2Repo struct {
	db *mysql.MysqlODM
}

func newPostPlus2Repo() *PostPlus2Repo {
	return &PostPlus2Repo{
		db: global.MysqlDb,
	}
}
func init() {
	global.Container.Provide(newPostPlus2Repo)
}

func (r *PostPlus2Repo) All(c *frame.Context, query *PostPlus2Query) (res []*PostPlus2, err error) {
	db := r.db.Client
	if query.SearchKey != `` {
		db = db.Where(`name LIKE ?`, `%`+query.SearchKey+`%`)
	}
	projectId := c.GetUint(`project_id`)
	if projectId > 0 {
		db = db.Where(`project_id=?`, projectId)
	}
	err = db.Find(&res).Error
	//	if errors.Is(err, gorm.ErrRecordNotFound) {
	//		err = nil
	//	}
	return
}
func (r *PostPlus2Repo) PageList(c *frame.Context, req *PostPlus2Query) (res *response.PageList, err error) {
	db := r.db.Client
	var pages []*PostPlus2

	if req.SearchKey != `` {
		db = db.Where(`name LIKE ?`, `%`+req.SearchKey+`%`)
	}
	projectId := c.GetUint(`project_id`)
	if projectId > 0 {
		db = db.Where(`project_id=?`, projectId)
	}
	offset := (req.Page - 1) * req.PageSize
	db = db.Offset(int(offset)).Limit(int(req.PageSize))
	// db=db.Order(`name desc`)
	err = db.Find(&pages).Error
	//	if errors.Is(err, gorm.ErrRecordNotFound) {
	//		err = nil
	//	}

	var count int64
	db.Offset(-1).Limit(-1).Count(&count)

	res = &response.PageList{
		List:  pages,
		Pages: response.MakePages(count, req.Page, req.PageSize),
	}
	return
}

func (r *PostPlus2Repo) One(c *frame.Context, id uint) (page *PostPlus2, err error) {
	cacheKey := `page_models_PostPlus2Repo_One_` + cast.ToString(id)
	if data, ok := global.GlobalCache.Load(cacheKey); ok {
		if data != nil {
			return data.(*PostPlus2), nil
		}
	}

	db := r.db.Client
	err = db.Where(`id=?`, id).First(&page).Error
	// if errors.Is(err, gorm.ErrRecordNotFound) {
	// 	err = nil
	// }
	if page != nil && page.ID > 0 {
		global.GlobalCache.Store(cacheKey, page)
	}
	return
}

func (r *PostPlus2Repo) OneByName(c *frame.Context, name string) (page *PostPlus2, err error) {
	db := r.db.Client
	err = db.Where(`name=?`, name).First(&page).Error
	// if errors.Is(err, gorm.ErrRecordNotFound) {
	// 	err = nil
	// }
	return
}

func (r *PostPlus2Repo) Add(c *frame.Context, model *PostPlus2) (newId uint, err error) {

	db := r.db.Client
	db = db.Create(&model)
	err = db.Error

	newId = model.ID
	return
}

func (r *PostPlus2Repo) Update(c *frame.Context, model *PostPlus2, id uint) (updated bool, err error) {
	if id == 0 {
		updated = false
		err = errors.New(`pls input id`)
		return
	}
	model.ID = id
	db := r.db.Client
	err = db.Omit(`created_at`).Save(&model).Error
	if err == nil {
		updated = true
		cacheKey := `page_models_PostPlus2Repo_One_` + cast.ToString(id)
		global.GlobalCache.Delete(cacheKey)
	}
	return
}

func (r *PostPlus2Repo) Delete(c *frame.Context, id uint) (deleted bool, err error) {
	if id == 0 {
		deleted = false
		err = errors.New(`pls input id`)
		return
	}
	db := r.db.Client
	model, err := r.One(c, id)
	if err != nil {
		return
	}
	if model.ID == 0 {
		err = errors.New(`obj not existe`)
		return
	}
	err = db.Delete(&model).Error
	if err == nil {
		deleted = true
		cacheKey := `page_models_PostPlus2Repo_One_` + cast.ToString(id)
		global.GlobalCache.Delete(cacheKey)
	}
	return
}
