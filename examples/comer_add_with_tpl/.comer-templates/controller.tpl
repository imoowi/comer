// generated by "comer add-with-tpl"
// © 2024 IMOOWI. All Rights Reserved.
//
//	@Author	yuanjun<imoowi@qq.com>
package controllers

import (
	"net/http"

	"{{.ModuleName}}/internal/global"
	"{{.ModuleName}}/internal/models"
	"{{.ModuleName}}/internal/services"
	"{{.ModuleName}}/pkg/frame"

	"github.com/spf13/cast"
)

// @Summary	分页列表(pagelist)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header		string				true	"Bearer 用户令牌"
//
//	@Param		{object}		query		models.{{.ModelName}}Query	false	"请求参数"
//
// @Success	200				{object}	response.PageList	"成功"
// @Failure	400				{object}	string				"请求错误"
// @Failure	401				{object}	string				"token验证失败"
// @Failure	500				{object}	string				"内部错误"
// @Router		/api/projects/{project_id}/{{.handlerName2Dash}}s [get]
func {{.HandlerName}}PageList(c *frame.Context) {
	var req models.{{.ModelName}}Query
	err := c.ShouldBindQuery(&req)
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	if 0 >= req.PageSize {
		result, err := services.{{.ServiceName}}.All(c, &req)
		if err != nil {
			c.ResponseErr(err.Error(), http.StatusBadRequest)
			return
		}
		c.ResponseOk(result)
		return
	}
	result, err := services.{{.ServiceName}}.PageList(c, &req)
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	c.ResponseOk(result)
}

// @Summary	详情(one)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure	400	{object}	string	"请求错误"
// @Failure	401	{object}	string	"token验证失败"
// @Failure	500	{object}	string	"内部错误"
// @Router		/api/projects/{project_id}/{{.handlerName2Dash}}s/{id} [get]
func {{.HandlerName}}One(c *frame.Context) {
	id := c.Param(`id`)
	if id == `` {
		c.ResponseErr(`pls input id`, http.StatusBadRequest)
		return
	}
	one, err := services.{{.ServiceName}}.One(c, cast.ToUint(id))
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	c.ResponseOk(one)
}

// @Summary	新增(add)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string		true	"Bearer 用户令牌"
// @Param		{object}		body	models.Page	true	"body"
// @Success	200
// @Failure	400	{object}	string	"请求错误"
// @Failure	401	{object}	string	"token验证失败"
// @Failure	500	{object}	string	"内部错误"
// @Router		/api/projects/{project_id}/{{.handlerName2Dash}}s [post]
func {{.HandlerName}}Add(c *frame.Context) {
	var page *models.{{.ModelName}}
	err := c.ShouldBindJSON(&page)
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	newId, err := services.{{.ServiceName}}.Add(c, page)
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	c.Set(`user_log_obj_id`, newId)
	c.Set(`user_log_res_type`, global.RES_TYPE_NULL)
	c.ResponseOk(newId)
}

// @Summary	更新(update)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string		true	"Bearer 用户令牌"
// @Param		id				path	int			true	"id"
// @Param		{object}		body	models.Page	true	"body"
// @Success	200
// @Failure	400	{object}	string	"请求错误"
// @Failure	401	{object}	string	"token验证失败"
// @Failure	500	{object}	string	"内部错误"
// @Router		/api/projects/{project_id}/{{.handlerName2Dash}}s/{id} [put]
func {{.HandlerName}}Update(c *frame.Context) {
	id := c.Param(`id`)
	if id == `` {
		c.ResponseErr(`pls input id`, http.StatusBadRequest)
		return
	}
	var page *models.{{.ModelName}}
	err := c.ShouldBindJSON(&page)
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	updated, err := services.{{.ServiceName}}.Update(c, page, cast.ToUint(id))
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	c.Set(`user_log_obj_id`, id)
	c.Set(`user_log_res_type`, global.RES_TYPE_NULL)
	c.ResponseOk(updated)
}

// @Summary	删除(delete)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure	400	{object}	string	"请求错误"
// @Failure	401	{object}	string	"token验证失败"
// @Failure	500	{object}	string	"内部错误"
// @Router		/api/projects/{project_id}/{{.handlerName2Dash}}s/{id} [delete]
func {{.HandlerName}}Del(c *frame.Context) {
	id := c.Param(`id`)
	if id == `` {
		c.ResponseErr(`pls input id`, http.StatusBadRequest)
		return
	}
	deleted, err := services.{{.ServiceName}}.Delete(c, cast.ToUint(id))
	if err != nil {
		c.ResponseErr(err.Error(), http.StatusBadRequest)
		return
	}
	c.Set(`user_log_obj_id`, id)
	c.Set(`user_log_res_type`, global.RES_TYPE_NULL)
	c.ResponseOk(deleted)
}
