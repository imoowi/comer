/*
generated by comer,https://github.com/imoowi/comer
Copyright © 2023 jun<simpleyuan@gmail.com>
*/
package repos

import (
	"errors"

	"github.com/gin-gonic/gin"
	"github.com/imoowi/comer/utils/maker"
	"github.com/imoowi/comer/utils/password"
	"{{.moduleName}}/internal/models"
	"{{.moduleName}}/internal/global"
	"github.com/imoowi/comer/interfaces"
	"github.com/imoowi/comer/interfaces/impl"
)


var User *UserRepo

type UserRepo struct {
	impl.Repo
}

func NewUserRepo() {
	db:=global.MysqlDb
	User = &UserRepo{
		Repo: *impl.NewRepo(db),
	}
}
func init() {
	RegisterRepos(NewUserRepo)
}
func (r *UserRepo) OneByUsername(c *gin.Context, username string) (user *models.User, err error) {
	db := r.DB.Client
	err = db.Where(`username=?`, username).First(&user).Error
	return
}

func (r *UserRepo) Login(c *gin.Context, login *models.UserLogin) (*models.User, error) {
	user, err := r.OneByUsername(c, login.Username)
	if err != nil {
		return nil, err
	}
	if user.ID > 0 {
		if user.Passwd == password.GeneratePassword(login.Passwd+user.Salt) {
			return user, nil
		} else {
			return nil, errors.New(`密码错误`)
		}
	}
	return nil, err
}

func (r *UserRepo) ChgPwd(c *gin.Context, userChgPwd *models.UserChgPwd) (ok bool, err error) {
	var mt interfaces.IModel = &models.User{}
	var q interfaces.IFilter = &models.UserFilter{}
	_user, err := r.One(c, &q, userChgPwd.UserId, &mt)
	if err != nil {
		return
	}
	user := (*_user).(*models.User)
	if user.GetID() <= 0 {
		err = errors.New(`用户不存在`)
		return
	}
	if userChgPwd.NewPwd != userChgPwd.ConfirmPwd {
		err = errors.New(`两次输入的新密码不一致`)
		return
	}
	if user.Passwd != password.GeneratePassword(userChgPwd.OriginPwd+user.Salt) {
		err = errors.New(`原始密码错误`)
		return
	}
	user.Salt = maker.MakeRandStr(6)
	user.Passwd = password.GeneratePassword(userChgPwd.NewPwd + user.Salt)
	db := r.DB.Client
	err = db.Omit(`created_at`).Save(&user).Error
	if err != nil {
		ok = false
	}
	ok = true
	return
}
