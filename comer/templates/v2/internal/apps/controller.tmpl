/*
generated by comer,https://github.com/imoowi/comer
Copyright © 2023 jun<simpleyuan@gmail.com>
*/
package controllers

import (
	"errors"
	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
	"github.com/imoowi/comer/interfaces"
	"github.com/imoowi/comer/utils/response"
	"{{.ModuleName}}/internal/models"
	"{{.ModuleName}}/internal/services"
	"net/http"
	"gorm.io/gorm"
	"github.com/spf13/cast"
)

// @Summary	分页列表(pagelist)
// @Tags	{{.SwaggerTags}}
// @Accept	application/json
// @Produce	application/json
// @Param	Authorization	header		string				true	"Bearer 用户令牌"
// @Param   {object}             query                 models.{{.ModelName}}Filter  false "query参数"
// @Success 200                               {object} response.PageList "成功"
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.controllerName2Dash}}s [get]
func {{.ControllerName}}PageList(c *gin.Context) {
	var filter interfaces.IFilter = &models.{{.ModelName}}Filter{}
	err := c.ShouldBindQuery(&filter)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	
	if 0 >= filter.GetPage(){ //如果不传Page，默认为1
		filter.SetPage(1)
	}
	if 0 >= filter.GetPageSize(){ //如果不传PageSize，默认取20条
		filter.SetPageSize(20)
	}
	if filter.GetPageSize() > 1000 {
		response.Error(`每一页不能超过1000条记录`, http.StatusBadRequest,c)
		return
	}
	var mt interfaces.IModel = &models.{{.ModelName}}{}
	result, err := services.{{.ServiceName}}.PageList(c, &filter, &mt)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			response.Error(err.Error(), http.StatusNotFound,c)
			return
		}
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(result,c)
}

// @Summary	详情(one)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.controllerName2Dash}}s/{id} [get]
func {{.ControllerName}}One(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}

	var f interfaces.IFilter = &models.{{.ModelName}}Filter{}
	var mt interfaces.IModel = &models.{{.ModelName}}{}
	one, err := services.{{.ServiceName}}.One(c, &f, cast.ToUint(id),&mt)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(one,c)
}

// @Summary	新增(add)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param {object} body  models.{{.ModelName}} true "body"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.controllerName2Dash}}s [post]
func {{.ControllerName}}Add(c *gin.Context) {
	var {{.modelName}} interfaces.IModel = &models.{{.ModelName}}{}
	err := c.ShouldBindBodyWith(&{{.modelName}},binding.JSON)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	var f interfaces.IFilter = &models.{{.ModelName}}Filter{}
	var mt interfaces.IModel = &models.{{.ModelName}}{}
	newId, err := services.{{.ServiceName}}.Add(c, &f, &{{.modelName}}, &mt)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(newId,c)
}

// @Summary	更新(update)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Param {object} body  models.{{.ModelName}} true "body"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.controllerName2Dash}}s/{id} [put]
func {{.ControllerName}}Update(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	var {{.modelName}} interfaces.IModel = &models.{{.ModelName}}{}
	err := c.ShouldBindBodyWith(&{{.modelName}},binding.JSON)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	var f interfaces.IFilter = &models.{{.ModelName}}Filter{}
	var mt interfaces.IModel = &models.{{.ModelName}}{}
	updated, err := services.{{.ServiceName}}.Update(c, &f, &{{.modelName}}, cast.ToUint(id), &mt)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(updated,c)
}

// @Summary	删除(delete)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.controllerName2Dash}}s/{id} [delete]
func {{.ControllerName}}Del(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	var f interfaces.IFilter = &models.{{.ModelName}}Filter{}
	var mt interfaces.IModel = &models.{{.ModelName}}{}
	deleted, err := services.{{.ServiceName}}.Delete(c, &f, cast.ToUint(id), &mt)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(deleted,c)
}
