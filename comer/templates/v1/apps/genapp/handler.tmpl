/*
generated by comer,https://github.com/imoowi/comer
Copyright © 2023 jun<simpleyuan@gmail.com>
*/
package handlers

import (
	"github.com/gin-gonic/gin"
	"github.com/imoowi/comer/utils/response"
	"{{.ModuleName}}/apps/{{.appName}}/models"
	"{{.ModuleName}}/apps/{{.appName}}/services"
	"net/http"

	"github.com/spf13/cast"
)

// @Summary	分页列表(pagelist)
// @Tags	{{.SwaggerTags}}
// @Accept	application/json
// @Produce	application/json
// @Param	Authorization	header		string				true	"Bearer 用户令牌"
// @Param   {object}             query                 models.{{.ModelName}}Query  false "query参数"
// @Success 200                               {object} response.PageList "成功"
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s [get]
func {{.HandlerName}}PageList(c *gin.Context) {
	var query models.{{.ModelName}}Query
	err := c.ShouldBindQuery(&query)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	/*
	if 0 >= query.Page && 0 >= query.PageSize{
		result, err := services.{{.ServiceName}}.All(c, &query)
		if err != nil {
			response.Error(err.Error(), http.StatusBadRequest,c)
			return
		}
		response.OK(result,c)
		return
	}
	//*/
	if 0 >= query.Page{ //如果不传Page，默认为1
		query.Page = 1
	}
	if 0 >= query.PageSize{ //如果不传PageSize，默认取20条
		query.PageSize = 20
	}
	if query.PageSize > 1000 {
		response.Error(`每一页不能超过1000条记录`, http.StatusBadRequest,c)
		return
	}
	result, err := services.{{.ServiceName}}.PageList(c, &query)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(result,c)
}

// @Summary	详情(one)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s/{id} [get]
func {{.HandlerName}}One(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	one, err := services.{{.ServiceName}}.One(c, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(one,c)
}

// @Summary	新增(add)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param {object} body  models.{{.ModelName}}Add true "body"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s [post]
func {{.HandlerName}}Add(c *gin.Context) {
	var {{.modelName}} *models.{{.ModelName}}Add
	err := c.ShouldBindJSON(&{{.modelName}})
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	newId, err := services.{{.ServiceName}}.Add(c, {{.modelName}})
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(newId,c)
}

// @Summary	更新(update)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Param {object} body  models.{{.ModelName}}Update true "body"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s/{id} [put]
func {{.HandlerName}}Update(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	var {{.modelName}} *models.{{.ModelName}}Update
	err := c.ShouldBindJSON(&{{.modelName}})
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	updated, err := services.{{.ServiceName}}.Update(c, {{.modelName}}, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(updated,c)
}

// @Summary	部分更新(update)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Param {object} body  models.{{.ModelName}}PatchUpdate true "body"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s/{id} [patch]
func {{.HandlerName}}Patch(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest, c)
		return
	}
	var {{.modelName}} *models.{{.ModelName}}PatchUpdate
	err := c.ShouldBindJSON(&{{.modelName}})
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	updated, err := services.{{.ServiceName}}.PatchUpdate(c, {{.modelName}}, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest, c)
		return
	}
	response.OK(updated, c)
}

// @Summary	删除(delete)
// @Tags		{{.SwaggerTags}}
// @Accept		application/json
// @Produce	application/json
// @Param		Authorization	header	string	true	"Bearer 用户令牌"
// @Param		id				path	int		true	"id"
// @Success	200
// @Failure 400                        "请求错误"
// @Failure 401                        "token验证失败"
// @Failure 500                         "内部错误"
// @Router		/api/{{.handlerName2Dash}}s/{id} [delete]
func {{.HandlerName}}Del(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	deleted, err := services.{{.ServiceName}}.Delete(c, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(deleted,c)
}
